require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"nonlinearModulate":[function(require,module,exports){
Utils.modulate = function(value, rangeA, rangeB, curve, limit) {
  var b, c, d, fromHigh, fromLow, i, result, t, toHigh, toLow;
  if (curve == null) {
    curve = "linear";
  }
  if (limit == null) {
    limit = false;
  }
  fromLow = rangeA[0], fromHigh = rangeA[1];
  toLow = rangeB[0], toHigh = rangeB[1];
  if (toLow > toHigh) {
    t = value;
    b = toLow;
    c = toHigh - toLow;
    d = fromHigh;
    i = 1;
  } else {
    t = value;
    b = toLow;
    c = toLow - toHigh;
    d = fromHigh;
    i = -1;
  }
  if (curve === "linear") {
    result = c * t / d * i + b;
  } else if (curve === "easeInQuad" || curve === "ease-in") {
    t /= d;
    result = c * t * t * +i + b;
  } else if (curve === "easeOutQuad" || curve === "ease-out") {
    t /= d;
    result = -c * t * (t - 2) * i + b;
  } else if (curve === "easeInOutQuad" || curve === "ease-in-out") {
    t /= d / 2;
    if (t < 1) {
      result = c / 2 * t * t * i + b;
    } else {
      t--;
      result = -c / 2 * (t * (t - 2) - 1) * i + b;
    }
  } else if (curve === "easeInCubic") {
    t /= d;
    result = c * t * t * t * i + b;
  } else if (curve === "easeOutCubic") {
    t /= d;
    t--;
    result = c * (t * t * t + 1) * 1 + b;
  } else if (curve === "easeInOutCubic") {
    t /= d / 2;
    if (t < 1) {
      result = c / 2 * t * t * t * i + b;
    } else {
      t -= 2;
      result = c / 2 * (t * t * t + 2) * i + b;
    }
  } else if (curve === "easeInQuart") {
    t /= d;
    result = c * t * t * t * t * i + b;
  } else if (curve === "easeOutQuart") {
    t /= d;
    t--;
    result = -c * (t * t * t * t - 1) * i + b;
  } else if (curve === "easeInOutQuart") {
    t /= d / 2;
    if (t < 1) {
      result = c / 2 * t * t * t * t * i + b;
    } else {
      t -= 2;
      result = -c / 2 * (t * t * t * t - 2) * i + b;
    }
  } else if (curve === "easeInQuint") {
    t /= d;
    result = c * t * t * t * t * t * i + b;
  } else if (curve === "easeOutQuint") {
    t /= d;
    t--;
    result = c * (t * t * t * t * t + 1) * i + b;
  } else if (curve === "easeInOutQuint") {
    t /= d / 2;
    if (t < 1) {
      result = c / 2 * t * t * t * t * t * i + b;
    } else {
      t -= 2;
      result = c / 2 * (t * t * t * t * t + 2) * i + b;
    }
  } else if (curve === "easeInSine") {
    result = -c * Math.cos(t / d * (Math.PI / 2)) * i + c + b;
  } else if (curve === "easeOutSine") {
    result = c * Math.sin(t / d * (Math.PI / 2)) * i + b;
  } else if (curve === "easeInOutSine") {
    result = -c / 2 * (Math.cos(Math.PI * t / d) - 1) * i + b;
  } else if (curve === "easeInExpo") {
    result = c * Math.pow(2, 10 * (t / d - 1)) * i + b;
  } else if (curve === "easeOutExpo") {
    result = c * (-Math.pow(2, -10 * t / d) + 1) * i + b;
  } else if (curve === "easeInOutExpo") {
    t /= d / 2;
    if (t < 1) {
      result = c / 2 * Math.pow(2, 10 * (t - 1)) * i + b;
    } else {
      t--;
      result = c / 2 * (-Math.pow(2, -10 * t) + 2) * i + b;
    }
  } else if (curve === "easeInCirc") {
    t /= d;
    result = -c * (Math.sqrt(1 - t * t) - 1) * i + b;
  } else if (curve === "easeOutCirc") {
    t /= d;
    t--;
    result = c * Math.sqrt(1 - t * t) * i + b;
  } else if (curve === "easeInOutCirc") {
    t /= d / 2;
    if (t < 1) {
      result = -c / 2 * (Math.sqrt(1 - t * t) - 1) * i + b;
    } else {
      t -= 2;
      result = c / 2 * (Math.sqrt(1 - t * t) + 1) * i + b;
    }
  } else if (curve === true) {
    limit = true;
    result = c * t / d * i + b;
  } else if (curve === false) {
    limit = false;
    result = c * t / d * i + b;
  }
  if (limit === true) {
    if (toLow < toHigh) {
      if (result < toLow) {
        return toLow;
      }
      if (result > toHigh) {
        return toHigh;
      }
    } else {
      if (result > toLow) {
        return toLow;
      }
      if (result < toHigh) {
        return toHigh;
      }
    }
  }
  return result;
};


},{}]},{},[])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
